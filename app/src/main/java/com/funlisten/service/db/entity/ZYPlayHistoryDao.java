package com.funlisten.service.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.funlisten.business.play.model.bean.ZYPlayHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZYPLAY_HISTORY".
*/
public class ZYPlayHistoryDao extends AbstractDao<ZYPlayHistory, String> {

    public static final String TABLENAME = "ZYPLAY_HISTORY";

    /**
     * Properties of entity ZYPlayHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AlbumId = new Property(0, String.class, "albumId", true, "ALBUM_ID");
        public final static Property AudioId = new Property(1, String.class, "audioId", false, "AUDIO_ID");
        public final static Property Position = new Property(2, int.class, "position", false, "POSITION");
        public final static Property Img = new Property(3, String.class, "img", false, "IMG");
        public final static Property CurrentDuration = new Property(4, long.class, "currentDuration", false, "CURRENT_DURATION");
        public final static Property LastUpdate = new Property(5, long.class, "lastUpdate", false, "LAST_UPDATE");
    }


    public ZYPlayHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public ZYPlayHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZYPLAY_HISTORY\" (" + //
                "\"ALBUM_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: albumId
                "\"AUDIO_ID\" TEXT," + // 1: audioId
                "\"POSITION\" INTEGER NOT NULL ," + // 2: position
                "\"IMG\" TEXT," + // 3: img
                "\"CURRENT_DURATION\" INTEGER NOT NULL ," + // 4: currentDuration
                "\"LAST_UPDATE\" INTEGER NOT NULL );"); // 5: lastUpdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZYPLAY_HISTORY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZYPlayHistory entity) {
        stmt.clearBindings();
 
        String albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindString(1, albumId);
        }
 
        String audioId = entity.getAudioId();
        if (audioId != null) {
            stmt.bindString(2, audioId);
        }
        stmt.bindLong(3, entity.getPosition());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(4, img);
        }
        stmt.bindLong(5, entity.getCurrentDuration());
        stmt.bindLong(6, entity.getLastUpdate());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZYPlayHistory entity) {
        stmt.clearBindings();
 
        String albumId = entity.getAlbumId();
        if (albumId != null) {
            stmt.bindString(1, albumId);
        }
 
        String audioId = entity.getAudioId();
        if (audioId != null) {
            stmt.bindString(2, audioId);
        }
        stmt.bindLong(3, entity.getPosition());
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(4, img);
        }
        stmt.bindLong(5, entity.getCurrentDuration());
        stmt.bindLong(6, entity.getLastUpdate());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ZYPlayHistory readEntity(Cursor cursor, int offset) {
        ZYPlayHistory entity = new ZYPlayHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // albumId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // audioId
            cursor.getInt(offset + 2), // position
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // img
            cursor.getLong(offset + 4), // currentDuration
            cursor.getLong(offset + 5) // lastUpdate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZYPlayHistory entity, int offset) {
        entity.setAlbumId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setAudioId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPosition(cursor.getInt(offset + 2));
        entity.setImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCurrentDuration(cursor.getLong(offset + 4));
        entity.setLastUpdate(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ZYPlayHistory entity, long rowId) {
        return entity.getAlbumId();
    }
    
    @Override
    public String getKey(ZYPlayHistory entity) {
        if(entity != null) {
            return entity.getAlbumId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZYPlayHistory entity) {
        return entity.getAlbumId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
