package com.funlisten.service.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.funlisten.business.download.model.bean.ZYDownloadEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZYDOWNLOAD_ENTITY".
*/
public class ZYDownloadEntityDao extends AbstractDao<ZYDownloadEntity, Integer> {

    public static final String TABLENAME = "ZYDOWNLOAD_ENTITY";

    /**
     * Properties of entity ZYDownloadEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AudioId = new Property(0, int.class, "audioId", true, "AUDIO_ID");
        public final static Property AlbumId = new Property(1, int.class, "albumId", false, "ALBUM_ID");
        public final static Property AlbumName = new Property(2, String.class, "albumName", false, "ALBUM_NAME");
        public final static Property AlbumCoverUrl = new Property(3, String.class, "albumCoverUrl", false, "ALBUM_COVER_URL");
        public final static Property AlbumPublisher = new Property(4, String.class, "albumPublisher", false, "ALBUM_PUBLISHER");
        public final static Property AlbumDownloadedSize = new Property(5, int.class, "albumDownloadedSize", false, "ALBUM_DOWNLOADED_SIZE");
        public final static Property AudioUpatedCount = new Property(6, int.class, "audioUpatedCount", false, "AUDIO_UPATED_COUNT");
        public final static Property AudioDowloadedCount = new Property(7, int.class, "audioDowloadedCount", false, "AUDIO_DOWLOADED_COUNT");
        public final static Property AudioCount = new Property(8, int.class, "audioCount", false, "AUDIO_COUNT");
        public final static Property AudioName = new Property(9, String.class, "audioName", false, "AUDIO_NAME");
        public final static Property AudioCreateTime = new Property(10, String.class, "audioCreateTime", false, "AUDIO_CREATE_TIME");
        public final static Property AudioSort = new Property(11, int.class, "audioSort", false, "AUDIO_SORT");
        public final static Property Size = new Property(12, long.class, "size", false, "SIZE");
        public final static Property CurrentSize = new Property(13, long.class, "currentSize", false, "CURRENT_SIZE");
        public final static Property Url = new Property(14, String.class, "url", false, "URL");
        public final static Property Path = new Property(15, String.class, "path", false, "PATH");
    }


    public ZYDownloadEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ZYDownloadEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZYDOWNLOAD_ENTITY\" (" + //
                "\"AUDIO_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: audioId
                "\"ALBUM_ID\" INTEGER NOT NULL ," + // 1: albumId
                "\"ALBUM_NAME\" TEXT," + // 2: albumName
                "\"ALBUM_COVER_URL\" TEXT," + // 3: albumCoverUrl
                "\"ALBUM_PUBLISHER\" TEXT," + // 4: albumPublisher
                "\"ALBUM_DOWNLOADED_SIZE\" INTEGER NOT NULL ," + // 5: albumDownloadedSize
                "\"AUDIO_UPATED_COUNT\" INTEGER NOT NULL ," + // 6: audioUpatedCount
                "\"AUDIO_DOWLOADED_COUNT\" INTEGER NOT NULL ," + // 7: audioDowloadedCount
                "\"AUDIO_COUNT\" INTEGER NOT NULL ," + // 8: audioCount
                "\"AUDIO_NAME\" TEXT," + // 9: audioName
                "\"AUDIO_CREATE_TIME\" TEXT," + // 10: audioCreateTime
                "\"AUDIO_SORT\" INTEGER NOT NULL ," + // 11: audioSort
                "\"SIZE\" INTEGER NOT NULL ," + // 12: size
                "\"CURRENT_SIZE\" INTEGER NOT NULL ," + // 13: currentSize
                "\"URL\" TEXT," + // 14: url
                "\"PATH\" TEXT);"); // 15: path
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZYDOWNLOAD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZYDownloadEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAudioId());
        stmt.bindLong(2, entity.getAlbumId());
 
        String albumName = entity.getAlbumName();
        if (albumName != null) {
            stmt.bindString(3, albumName);
        }
 
        String albumCoverUrl = entity.getAlbumCoverUrl();
        if (albumCoverUrl != null) {
            stmt.bindString(4, albumCoverUrl);
        }
 
        String albumPublisher = entity.getAlbumPublisher();
        if (albumPublisher != null) {
            stmt.bindString(5, albumPublisher);
        }
        stmt.bindLong(6, entity.getAlbumDownloadedSize());
        stmt.bindLong(7, entity.getAudioUpatedCount());
        stmt.bindLong(8, entity.getAudioDowloadedCount());
        stmt.bindLong(9, entity.getAudioCount());
 
        String audioName = entity.getAudioName();
        if (audioName != null) {
            stmt.bindString(10, audioName);
        }
 
        String audioCreateTime = entity.getAudioCreateTime();
        if (audioCreateTime != null) {
            stmt.bindString(11, audioCreateTime);
        }
        stmt.bindLong(12, entity.getAudioSort());
        stmt.bindLong(13, entity.getSize());
        stmt.bindLong(14, entity.getCurrentSize());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(15, url);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(16, path);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZYDownloadEntity entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getAudioId());
        stmt.bindLong(2, entity.getAlbumId());
 
        String albumName = entity.getAlbumName();
        if (albumName != null) {
            stmt.bindString(3, albumName);
        }
 
        String albumCoverUrl = entity.getAlbumCoverUrl();
        if (albumCoverUrl != null) {
            stmt.bindString(4, albumCoverUrl);
        }
 
        String albumPublisher = entity.getAlbumPublisher();
        if (albumPublisher != null) {
            stmt.bindString(5, albumPublisher);
        }
        stmt.bindLong(6, entity.getAlbumDownloadedSize());
        stmt.bindLong(7, entity.getAudioUpatedCount());
        stmt.bindLong(8, entity.getAudioDowloadedCount());
        stmt.bindLong(9, entity.getAudioCount());
 
        String audioName = entity.getAudioName();
        if (audioName != null) {
            stmt.bindString(10, audioName);
        }
 
        String audioCreateTime = entity.getAudioCreateTime();
        if (audioCreateTime != null) {
            stmt.bindString(11, audioCreateTime);
        }
        stmt.bindLong(12, entity.getAudioSort());
        stmt.bindLong(13, entity.getSize());
        stmt.bindLong(14, entity.getCurrentSize());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(15, url);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(16, path);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public ZYDownloadEntity readEntity(Cursor cursor, int offset) {
        ZYDownloadEntity entity = new ZYDownloadEntity( //
            cursor.getInt(offset + 0), // audioId
            cursor.getInt(offset + 1), // albumId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // albumName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // albumCoverUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // albumPublisher
            cursor.getInt(offset + 5), // albumDownloadedSize
            cursor.getInt(offset + 6), // audioUpatedCount
            cursor.getInt(offset + 7), // audioDowloadedCount
            cursor.getInt(offset + 8), // audioCount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // audioName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // audioCreateTime
            cursor.getInt(offset + 11), // audioSort
            cursor.getLong(offset + 12), // size
            cursor.getLong(offset + 13), // currentSize
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // url
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // path
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZYDownloadEntity entity, int offset) {
        entity.setAudioId(cursor.getInt(offset + 0));
        entity.setAlbumId(cursor.getInt(offset + 1));
        entity.setAlbumName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlbumCoverUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAlbumPublisher(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAlbumDownloadedSize(cursor.getInt(offset + 5));
        entity.setAudioUpatedCount(cursor.getInt(offset + 6));
        entity.setAudioDowloadedCount(cursor.getInt(offset + 7));
        entity.setAudioCount(cursor.getInt(offset + 8));
        entity.setAudioName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAudioCreateTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAudioSort(cursor.getInt(offset + 11));
        entity.setSize(cursor.getLong(offset + 12));
        entity.setCurrentSize(cursor.getLong(offset + 13));
        entity.setUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPath(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(ZYDownloadEntity entity, long rowId) {
        return entity.getAudioId();
    }
    
    @Override
    public Integer getKey(ZYDownloadEntity entity) {
        if(entity != null) {
            return entity.getAudioId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZYDownloadEntity entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
