package com.funlisten.service.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.funlisten.business.download.model.bean.ZYDownloadEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ZYDOWNLOAD_ENTITY".
*/
public class ZYDownloadEntityDao extends AbstractDao<ZYDownloadEntity, String> {

    public static final String TABLENAME = "ZYDOWNLOAD_ENTITY";

    /**
     * Properties of entity ZYDownloadEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Sort = new Property(1, int.class, "sort", false, "SORT");
        public final static Property AlbumId = new Property(2, int.class, "albumId", false, "ALBUM_ID");
        public final static Property AlbumJson = new Property(3, String.class, "albumJson", false, "ALBUM_JSON");
        public final static Property AudioId = new Property(4, int.class, "audioId", false, "AUDIO_ID");
        public final static Property AudioJson = new Property(5, String.class, "audioJson", false, "AUDIO_JSON");
        public final static Property Total = new Property(6, long.class, "total", false, "TOTAL");
        public final static Property Current = new Property(7, long.class, "current", false, "CURRENT");
        public final static Property Url = new Property(8, String.class, "url", false, "URL");
        public final static Property SavePath = new Property(9, String.class, "savePath", false, "SAVE_PATH");
        public final static Property StateValue = new Property(10, int.class, "stateValue", false, "STATE_VALUE");
    }


    public ZYDownloadEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ZYDownloadEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ZYDOWNLOAD_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"SORT\" INTEGER NOT NULL ," + // 1: sort
                "\"ALBUM_ID\" INTEGER NOT NULL ," + // 2: albumId
                "\"ALBUM_JSON\" TEXT," + // 3: albumJson
                "\"AUDIO_ID\" INTEGER NOT NULL ," + // 4: audioId
                "\"AUDIO_JSON\" TEXT," + // 5: audioJson
                "\"TOTAL\" INTEGER NOT NULL ," + // 6: total
                "\"CURRENT\" INTEGER NOT NULL ," + // 7: current
                "\"URL\" TEXT," + // 8: url
                "\"SAVE_PATH\" TEXT," + // 9: savePath
                "\"STATE_VALUE\" INTEGER NOT NULL );"); // 10: stateValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ZYDOWNLOAD_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ZYDownloadEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getSort());
        stmt.bindLong(3, entity.getAlbumId());
 
        String albumJson = entity.getAlbumJson();
        if (albumJson != null) {
            stmt.bindString(4, albumJson);
        }
        stmt.bindLong(5, entity.getAudioId());
 
        String audioJson = entity.getAudioJson();
        if (audioJson != null) {
            stmt.bindString(6, audioJson);
        }
        stmt.bindLong(7, entity.getTotal());
        stmt.bindLong(8, entity.getCurrent());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(10, savePath);
        }
        stmt.bindLong(11, entity.getStateValue());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ZYDownloadEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getSort());
        stmt.bindLong(3, entity.getAlbumId());
 
        String albumJson = entity.getAlbumJson();
        if (albumJson != null) {
            stmt.bindString(4, albumJson);
        }
        stmt.bindLong(5, entity.getAudioId());
 
        String audioJson = entity.getAudioJson();
        if (audioJson != null) {
            stmt.bindString(6, audioJson);
        }
        stmt.bindLong(7, entity.getTotal());
        stmt.bindLong(8, entity.getCurrent());
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(9, url);
        }
 
        String savePath = entity.getSavePath();
        if (savePath != null) {
            stmt.bindString(10, savePath);
        }
        stmt.bindLong(11, entity.getStateValue());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ZYDownloadEntity readEntity(Cursor cursor, int offset) {
        ZYDownloadEntity entity = new ZYDownloadEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getInt(offset + 1), // sort
            cursor.getInt(offset + 2), // albumId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // albumJson
            cursor.getInt(offset + 4), // audioId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // audioJson
            cursor.getLong(offset + 6), // total
            cursor.getLong(offset + 7), // current
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // url
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // savePath
            cursor.getInt(offset + 10) // stateValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ZYDownloadEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSort(cursor.getInt(offset + 1));
        entity.setAlbumId(cursor.getInt(offset + 2));
        entity.setAlbumJson(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAudioId(cursor.getInt(offset + 4));
        entity.setAudioJson(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTotal(cursor.getLong(offset + 6));
        entity.setCurrent(cursor.getLong(offset + 7));
        entity.setUrl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSavePath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setStateValue(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ZYDownloadEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ZYDownloadEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ZYDownloadEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
